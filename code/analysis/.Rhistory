# human
df.exp_1 = read_csv("../../data/data_long.csv")
library("emmeans")     # for linear contrasts
library("tidybayes")   # tidying up results from Bayesian models
library("brms")        # Bayesian regression models with Stan
library("tidyverse")   # for wrangling, plotting, etc.
library("dplyr")
# human
df.exp_1 = read_csv("../../data/data_long.csv")
head(df.exp_1)
# model neutral
df.exp_1_model_neutral = read_csv("../../data/results/model_results_long.csv")
df.exp_1_model_neutral = df.exp_1_model_neutral[df.exp_1_model_neutral$model == "gpt-4-0613",]
df.exp_1_model_neutral <- df.exp_1_model_neutral %>% filter(between(scenario_id, 0, 9))
df.exp_1_model_neutral$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_neutral$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "good"] <- good_val
}
}
View(df.exp_1_model_neutral)
# model neutral
df.exp_1_model_neutral = read_csv("../../data/results/model_results_long.csv")
df.exp_1_model_neutral = df.exp_1_model_neutral[df.exp_1_model_neutral$model == "gpt-4-0613" & df.exp_1_model_neutral$method == "0shot",]
df.exp_1_model_neutral <- df.exp_1_model_neutral %>% filter(between(scenario_id, 0, 9))
df.exp_1_model_neutral$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_neutral$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "good"] <- good_val
}
}
# model neutral
df.exp_1_model_neutral = read_csv("../../data/results/model_results_long.csv")
df.exp_1_model_neutral = df.exp_1_model_neutral[df.exp_1_model_neutral$model == "gpt-4-0613" & df.exp_1_model_neutral$method == "0shot",]
df.exp_1_model_neutral <- df.exp_1_model_neutral %>% filter(between(scenario_id, 0, 10))
df.exp_1_model_neutral$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_neutral$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "good"] <- good_val
}
}
View(df.exp_1_model_neutral)
# model neutral
df.exp_1_model_neutral = read_csv("../../data/results/model_results_long.csv")
df.exp_1_model_neutral = df.exp_1_model_neutral[df.exp_1_model_neutral$model == "gpt-4-0613" & df.exp_1_model_neutral$method == "0shot",]
df.exp_1_model_neutral <- df.exp_1_model_neutral %>% filter(between(scenario_id, 1, 10))
df.exp_1_model_neutral$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_neutral$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "good"] <- good_val
}
}
View(df.exp_1_model_neutral)
# model kantian
df.exp_1_model_kant = read_csv("../../data/results/model_results_long_kant.csv")
df.exp_1_model_kant <- df.exp_1_model_kant %>% filter(between(scenario_id, 0, 9))
df.exp_1_model_kant$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_kant$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_kant[df.exp_1_model_kant$causal_structure == cs & df.exp_1_model_kant$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_kant[df.exp_1_model_kant$causal_structure == cs & df.exp_1_model_kant$scenario_id == sid, "good"] <- good_val
}
}
View(df.exp_1_model_kant)
# model neutral
df.exp_1_model_neutral = read_csv("../../data/results/model_results_long.csv")
df.exp_1_model_neutral = df.exp_1_model_neutral[df.exp_1_model_neutral$model == "gpt-4-0613" & df.exp_1_model_neutral$method == "0shot",]
df.exp_1_model_neutral <- df.exp_1_model_neutral %>% filter(between(scenario_id, 0, 9))
df.exp_1_model_neutral$harm <- NA  # Initialize new column 'harm' with NAs
df.exp_1_model_neutral$good <- NA  # Initialize new column 'good' with NAs
# Loop over unique values of causal_structure and scenario_id
for(cs in unique(df.exp_1$causal_structure)) {
for(sid in unique(df.exp_1$scenario_id)) {
# Filter df.exp_1 for the specific combination of causal_structure and scenario_id
sub_df <- subset(df.exp_1, causal_structure == cs & scenario_id == sid)
# Calculate the value you want to assign, e.g., mean, median, etc.
harm_val <- mean(sub_df$harm, na.rm = TRUE)
good_val <- mean(sub_df$good, na.rm = TRUE)
# Assign the calculated values to the corresponding rows in df.exp_1_model
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "harm"] <- harm_val
df.exp_1_model_neutral[df.exp_1_model_neutral$causal_structure == cs & df.exp_1_model_neutral$scenario_id == sid, "good"] <- good_val
}
}
View(df.exp_1_model_neutral)
fit.brm_exp_1_permissibility_n = brm(formula = permissibility_rating ~ 1 + causal_structure + evitability + action + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_intention_kn = brm(formula = intention_rating ~ 1 + causal_structure + evitability + action + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_permissibility_n_harm_good = brm(formula = permissibility_rating ~ 1 + causal_structure + evitability + action + harm + good + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_permissibility_n = brm(formula = permissibility_rating ~ 1 + causal_structure + evitability + action + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_intention_n = brm(formula = intention_rating ~ 1 + causal_structure + evitability + action + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_permissibility_n_harm_good = brm(formula = permissibility_rating ~ 1 + causal_structure + evitability + action + harm + good + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
fit.brm_exp_1_intention_n_harm_good = brm(formula = intention_rating ~ 1 + causal_structure + evitability + action + harm + good + (1 | scenario_id),
data = df.exp_1_model_neutral,
seed = 1)
emm = fit.brm_exp_1_intention_neutral %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm = fit.brm_exp_1_permissibility_n %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_intention_n %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n %>%
emmeans(specs = pairwise ~ evitability,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n %>%
emmeans(specs = pairwise ~ action,
type = "response")
emm
emm = fit.brm_exp_1_intention_n %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_intention_n %>%
emmeans(specs = pairwise ~ evitability,
type = "response")
emm
emm = fit.brm_exp_1_intention_n %>%
emmeans(specs = pairwise ~ evitability,
type = "response")
emm
emm = fit.brm_exp_1_intention_n %>%
emmeans(specs = pairwise ~ action,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n_harm_good %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n_harm_good %>%
emmeans(specs = pairwise ~ evitability,
type = "response")
emm
emm = fit.brm_exp_1_permissibility_n_harm_good %>%
emmeans(specs = pairwise ~ action,
type = "response")
emm
emm = fit.brm_exp_1_intention_n_harm_good %>%
emmeans(specs = pairwise ~ causal_structure,
type = "response")
emm
emm = fit.brm_exp_1_intention_n_harm_good %>%
emmeans(specs = pairwise ~ evitability,
type = "response")
emm
emm = fit.brm_exp_1_intention_n_harm_good %>%
emmeans(specs = pairwise ~ action
type = "response")
emm = fit.brm_exp_1_intention_n_harm_good %>%
emmeans(specs = pairwise ~ action,
type = "response")
emm
